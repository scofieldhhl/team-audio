package com.naman14.timber.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SONG".
*/
public class SongDao extends AbstractDao<Song, Long> {

    public static final String TABLENAME = "SONG";

    /**
     * Properties of entity Song.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Index = new Property(0, long.class, "index", true, "_id");
        public final static Property AlbumId = new Property(1, long.class, "albumId", false, "ALBUM_ID");
        public final static Property AlbumName = new Property(2, String.class, "albumName", false, "ALBUM_NAME");
        public final static Property ArtistId = new Property(3, long.class, "artistId", false, "ARTIST_ID");
        public final static Property ArtistName = new Property(4, String.class, "artistName", false, "ARTIST_NAME");
        public final static Property Duration = new Property(5, int.class, "duration", false, "DURATION");
        public final static Property Id = new Property(6, long.class, "id", false, "ID");
        public final static Property Title = new Property(7, String.class, "title", false, "TITLE");
        public final static Property TrackNumber = new Property(8, int.class, "trackNumber", false, "TRACK_NUMBER");
        public final static Property Path = new Property(9, String.class, "path", false, "PATH");
        public final static Property IndexBegin = new Property(10, String.class, "indexBegin", false, "INDEX_BEGIN");
        public final static Property IndexEnd = new Property(11, String.class, "indexEnd", false, "INDEX_END");
        public final static Property Format = new Property(12, String.class, "format", false, "FORMAT");
        public final static Property SeekPostion = new Property(13, long.class, "seekPostion", false, "SEEK_POSTION");
        public final static Property SampleRate = new Property(14, String.class, "sampleRate", false, "SAMPLE_RATE");
        public final static Property Bit = new Property(15, String.class, "bit", false, "BIT");
        public final static Property BitRate = new Property(16, String.class, "bitRate", false, "BIT_RATE");
        public final static Property CategoryType = new Property(17, String.class, "categoryType", false, "CATEGORY_TYPE");
    };


    public SongDao(DaoConfig config) {
        super(config);
    }
    
    public SongDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SONG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: index
                "\"ALBUM_ID\" INTEGER NOT NULL ," + // 1: albumId
                "\"ALBUM_NAME\" TEXT," + // 2: albumName
                "\"ARTIST_ID\" INTEGER NOT NULL ," + // 3: artistId
                "\"ARTIST_NAME\" TEXT," + // 4: artistName
                "\"DURATION\" INTEGER NOT NULL ," + // 5: duration
                "\"ID\" INTEGER NOT NULL ," + // 6: id
                "\"TITLE\" TEXT," + // 7: title
                "\"TRACK_NUMBER\" INTEGER NOT NULL ," + // 8: trackNumber
                "\"PATH\" TEXT," + // 9: path
                "\"INDEX_BEGIN\" TEXT," + // 10: indexBegin
                "\"INDEX_END\" TEXT," + // 11: indexEnd
                "\"FORMAT\" TEXT," + // 12: format
                "\"SEEK_POSTION\" INTEGER NOT NULL ," + // 13: seekPostion
                "\"SAMPLE_RATE\" TEXT," + // 14: sampleRate
                "\"BIT\" TEXT," + // 15: bit
                "\"BIT_RATE\" TEXT," + // 16: bitRate
                "\"CATEGORY_TYPE\" TEXT);"); // 17: categoryType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SONG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Song entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIndex());
        stmt.bindLong(2, entity.getAlbumId());
 
        String albumName = entity.getAlbumName();
        if (albumName != null) {
            stmt.bindString(3, albumName);
        }
        stmt.bindLong(4, entity.getArtistId());
 
        String artistName = entity.getArtistName();
        if (artistName != null) {
            stmt.bindString(5, artistName);
        }
        stmt.bindLong(6, entity.getDuration());
        stmt.bindLong(7, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
        stmt.bindLong(9, entity.getTrackNumber());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(10, path);
        }
 
        String indexBegin = entity.getIndexBegin();
        if (indexBegin != null) {
            stmt.bindString(11, indexBegin);
        }
 
        String indexEnd = entity.getIndexEnd();
        if (indexEnd != null) {
            stmt.bindString(12, indexEnd);
        }
 
        String format = entity.getFormat();
        if (format != null) {
            stmt.bindString(13, format);
        }
        stmt.bindLong(14, entity.getSeekPostion());
 
        String sampleRate = entity.getSampleRate();
        if (sampleRate != null) {
            stmt.bindString(15, sampleRate);
        }
 
        String bit = entity.getBit();
        if (bit != null) {
            stmt.bindString(16, bit);
        }
 
        String bitRate = entity.getBitRate();
        if (bitRate != null) {
            stmt.bindString(17, bitRate);
        }
 
        String categoryType = entity.getCategoryType();
        if (categoryType != null) {
            stmt.bindString(18, categoryType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Song entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIndex());
        stmt.bindLong(2, entity.getAlbumId());
 
        String albumName = entity.getAlbumName();
        if (albumName != null) {
            stmt.bindString(3, albumName);
        }
        stmt.bindLong(4, entity.getArtistId());
 
        String artistName = entity.getArtistName();
        if (artistName != null) {
            stmt.bindString(5, artistName);
        }
        stmt.bindLong(6, entity.getDuration());
        stmt.bindLong(7, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
        stmt.bindLong(9, entity.getTrackNumber());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(10, path);
        }
 
        String indexBegin = entity.getIndexBegin();
        if (indexBegin != null) {
            stmt.bindString(11, indexBegin);
        }
 
        String indexEnd = entity.getIndexEnd();
        if (indexEnd != null) {
            stmt.bindString(12, indexEnd);
        }
 
        String format = entity.getFormat();
        if (format != null) {
            stmt.bindString(13, format);
        }
        stmt.bindLong(14, entity.getSeekPostion());
 
        String sampleRate = entity.getSampleRate();
        if (sampleRate != null) {
            stmt.bindString(15, sampleRate);
        }
 
        String bit = entity.getBit();
        if (bit != null) {
            stmt.bindString(16, bit);
        }
 
        String bitRate = entity.getBitRate();
        if (bitRate != null) {
            stmt.bindString(17, bitRate);
        }
 
        String categoryType = entity.getCategoryType();
        if (categoryType != null) {
            stmt.bindString(18, categoryType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Song readEntity(Cursor cursor, int offset) {
        Song entity = new Song( //
            cursor.getLong(offset + 0), // index
            cursor.getLong(offset + 1), // albumId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // albumName
            cursor.getLong(offset + 3), // artistId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // artistName
            cursor.getInt(offset + 5), // duration
            cursor.getLong(offset + 6), // id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // title
            cursor.getInt(offset + 8), // trackNumber
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // path
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // indexBegin
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // indexEnd
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // format
            cursor.getLong(offset + 13), // seekPostion
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // sampleRate
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // bit
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // bitRate
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // categoryType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Song entity, int offset) {
        entity.setIndex(cursor.getLong(offset + 0));
        entity.setAlbumId(cursor.getLong(offset + 1));
        entity.setAlbumName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setArtistId(cursor.getLong(offset + 3));
        entity.setArtistName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDuration(cursor.getInt(offset + 5));
        entity.setId(cursor.getLong(offset + 6));
        entity.setTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTrackNumber(cursor.getInt(offset + 8));
        entity.setPath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIndexBegin(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIndexEnd(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFormat(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSeekPostion(cursor.getLong(offset + 13));
        entity.setSampleRate(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setBit(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setBitRate(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCategoryType(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Song entity, long rowId) {
        entity.setIndex(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Song entity) {
        if(entity != null) {
            return entity.getIndex();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
